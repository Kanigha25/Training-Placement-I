static inline int cmp(const void *a, const void *b){
    return *(int*)a - *(int*)b;
}

static int binsearch(int *arr, int arrSize, int x){
    int l=0, r=arrSize-1, mid;
    while(l < r){
        mid = l + (r-l) / 2 + 1;
        if(mid > arrSize){
            return arrSize - 1;
        } if(arr[mid] < x){
            l = mid+1;
        } else if (arr[mid] > x){
            r = mid-1;
        } else {
            return l;
        }
    }
    return l;
}

int* findClosestElements(int* arr, int arrSize, int k, int x, int* returnSize) {
    if(arrSize == 1){
        *returnSize = 1;
        return arr;
    }
    int *retval = calloc(k, sizeof(int));
    int r = binsearch(arr, arrSize, x);
    r += arr[r] < x;
    int l = r-1;
    int lctr=0, rctr=k-1;
    *returnSize = k;
    while(k){
        k--;
        if(r < arrSize && (l < 0 || arr[r] - x < x - arr[l])){
            retval[rctr--] = arr[r++];
        } else if(l >= 0) {
            retval[lctr++] = arr[l--];
        }
    }
    qsort(retval, *returnSize, sizeof(int), cmp);
    return retval;
}
