typedef struct
{
    struct TreeNode * node;
    int r_idx;
    int c_idx;
}queue_item;

typedef struct
{
    int front;
    int rear;
    int size;
    queue_item * queue_arr;
}queue;

bool isQueueEmpty(queue * Queue)
{
    return ((Queue->front == -1) ? true : false);
}

bool isQueueFull(queue * Queue)
{
    return ((Queue->rear == Queue->size - 1) ? true : false);
}

void enqueue(queue * Queue, queue_item item)
{
    if(isQueueFull(Queue))
        return;

    Queue->queue_arr[++(Queue->rear)].node = item.node;
    Queue->queue_arr[Queue->rear].r_idx = item.r_idx;
    Queue->queue_arr[Queue->rear].c_idx = item.c_idx;
    
    if(Queue->front == -1)
        Queue->front = 0;
    return;
}

queue_item dequeue(queue * Queue)
{
    queue_item ret_val;
    if(isQueueEmpty(Queue)) 
    {
        return ret_val;
    }
    
    ret_val = Queue->queue_arr[Queue->front];
    if(Queue->front == Queue->rear)
    {
        Queue->front = -1;
        Queue->rear = -1;
    }
    else
    {
        ++(Queue->front);
    }
    return ret_val;
}

int find_height(struct TreeNode * root)
{
    if(root)
    {
        int l_subtree_ht = find_height(root->left);
        int r_subtree_ht = find_height(root->right);

        return (l_subtree_ht >= r_subtree_ht) ? (l_subtree_ht + 1) : (r_subtree_ht + 1);
    }
    return 0;
}

int count_node(struct TreeNode * root)
{
    if(root)
    {
        int l_subtree_nodes = count_node(root->left);
        int r_subtree_nodes = count_node(root->right);

        return (l_subtree_nodes + r_subtree_nodes + 1);
    }
    return 0;
}



char*** printTree(struct TreeNode* root, int* returnSize, int** returnColumnSizes) 
{
    int height = find_height(root);    
    height -= 1;

    int num_nodes = count_node(root);
    queue Queue;
    Queue.front = -1;
    Queue.rear = -1;
    Queue.size = num_nodes;

    Queue.queue_arr = (queue_item *)malloc(sizeof(queue_item) * Queue.size);

    int num_rows = height + 1;
    int num_col = pow(2, height + 1) - 1;

    char *** ret_arr = (char ***)malloc(sizeof(char **) * num_rows);
    int i=0;
    for(i=0; i<num_rows; i++)
    {
        ret_arr[i] = (char **)malloc(sizeof(char *) * num_col);
        int j=0;
        for(j=0; j<num_col; j++)
        {
            ret_arr[i][j] = (char *)malloc(sizeof(char) * 1);
            ret_arr[i][j][0] = '\0';   
        }
    }

    int * ret_col = (int *)malloc(sizeof(int) * num_rows);
    for(i=0; i<num_rows; i++)
    {
        ret_col[i] = num_col;
    }

    
    queue_item item;
    item.node = root;
    item.r_idx = 0;
    item.c_idx = (num_col - 1)/2;

    enqueue(&Queue, item);
    int level = 0;
    

    while(isQueueEmpty(&Queue) == false)
    {
        int available_elements = Queue.rear - Queue.front + 1;

        while(available_elements > 0)
        {
            int col_index = -1;
            int row_index = -1;
            
            queue_item dequeue_element = dequeue(&Queue);
            
            col_index = dequeue_element.c_idx;
            row_index = dequeue_element.r_idx;
            free(ret_arr[row_index][col_index]);
            ret_arr[row_index][col_index] = (char *)malloc(sizeof(char) * 4);
            sprintf(ret_arr[row_index][col_index], "%d", dequeue_element.node->val);

            if(dequeue_element.node->left)   
            {
                queue_item item;
                item.node = dequeue_element.node->left;
                item.r_idx = level + 1;
                item.c_idx = col_index - pow(2, height - row_index - 1);

                enqueue(&Queue, item);
            }

            if(dequeue_element.node->right)  
            {
                queue_item item;
                item.node = dequeue_element.node->right;
                item.r_idx = level + 1;
                item.c_idx = col_index + pow(2, height - row_index - 1);

                enqueue(&Queue, item);

            }

            available_elements--;
        }

        level++;
    }


    *returnSize = num_rows;
    *returnColumnSizes = ret_col;
    return ret_arr;


}
